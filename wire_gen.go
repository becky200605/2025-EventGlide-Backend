// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/raiki02/EG/internal/cache"
	"github.com/raiki02/EG/internal/controller"
	"github.com/raiki02/EG/internal/dao"
	"github.com/raiki02/EG/internal/ioc"
	"github.com/raiki02/EG/internal/middleware"
	"github.com/raiki02/EG/internal/router"
	"github.com/raiki02/EG/internal/server"
	"github.com/raiki02/EG/internal/service"
)

// Injectors from wire.go:

func InitApp(e *gin.Engine) *server.Server {
	db := ioc.InitDB()
	userDao := dao.NewUserDao(db)
	actDao := dao.NewActDao(db)
	postDao := dao.NewPostDao(db)
	client := ioc.InitRedis()
	jwt := middleware.NewJwt(client)
	ccnuService := service.NewCCNUService()
	imgUploader := service.NewImgUploader()
	userService := service.NewUserService(userDao, actDao, postDao, jwt, ccnuService, imgUploader)
	userController := controller.NewUserController(e, userService)
	userRouter := router.NewUserRouter(e, userController)
	cacheCache := cache.NewCache(client)
	actController := controller.NewActController(actDao, jwt, cacheCache, imgUploader)
	actRouter := router.NewActRouter(e, actController)
	postService := service.NewPostService(postDao, imgUploader)
	postController := controller.NewPostController(postService)
	postRouter := router.NewPostRouter(e, postController)
	commentDao := dao.NewCommentDao(db)
	commentService := service.NewCommentService(commentDao)
	commentController := controller.NewCommentController(commentService)
	commentRouter := router.NewCommentRouter(commentController, e)
	cors := middleware.NewCors(e)
	routerRouter := router.NewRouter(e, userRouter, actRouter, postRouter, commentRouter, cors)
	serverServer := server.NewServer(routerRouter)
	return serverServer
}
