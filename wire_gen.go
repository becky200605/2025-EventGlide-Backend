// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/raiki02/EG/internal/cache"
	"github.com/raiki02/EG/internal/controller"
	"github.com/raiki02/EG/internal/dao"
	"github.com/raiki02/EG/internal/ioc"
	"github.com/raiki02/EG/internal/middleware"
	"github.com/raiki02/EG/internal/mq"
	"github.com/raiki02/EG/internal/router"
	"github.com/raiki02/EG/internal/server"
	"github.com/raiki02/EG/internal/service"
)

// Injectors from wire.go:

func InitApp(e *gin.Engine) *server.Server {
	db := ioc.InitDB()
	logger := ioc.Newlogger()
	userDao := dao.NewUserDao(db, logger)
	actDao := dao.NewActDao(db, logger)
	postDao := dao.NewPostDao(db, logger)
	commentDao := dao.NewCommentDao(db, logger)
	client := ioc.InitRedis()
	jwt := middleware.NewJwt(client)
	ccnuService := service.NewCCNUService()
	imgUploader := service.NewImgUploader()
	cacheCache := cache.NewCache(client)
	activityService := service.NewActivityService(actDao, cacheCache, userDao, logger)
	postService := service.NewPostService(postDao, userDao, logger)
	userService := service.NewUserService(userDao, actDao, postDao, commentDao, jwt, ccnuService, imgUploader, activityService, postService, logger)
	userController := controller.NewUserController(e, userService, logger)
	userRouter := router.NewUserRouter(e, userController, jwt)
	actController := controller.NewActController(activityService, imgUploader, logger)
	actRouter := router.NewActRouter(e, actController, jwt)
	postController := controller.NewPostController(postService, logger)
	postRouter := router.NewPostRouter(e, postController, jwt)
	interactionDao := dao.NewInteractionDao(db, commentDao, userDao, actDao, postDao, logger)
	mqHdl := mq.NewMQ(client)
	commentService := service.NewCommentService(commentDao, userDao, interactionDao, logger, mqHdl)
	commentController := controller.NewCommentController(commentService, logger)
	commentRouter := router.NewCommentRouter(commentController, e, jwt)
	feedDao := dao.NewFeedDao(db, logger)
	feedService := service.NewFeedService(feedDao, mqHdl, userDao, logger)
	feedController := controller.NewFeedController(feedService, logger)
	feedRouter := router.NewFeedRouter(feedController, e, jwt)
	interactionService := service.NewInteractionService(interactionDao, mqHdl, logger)
	interactionController := controller.NewInteractionController(interactionService, logger)
	interactionRouter := router.NewInteractionRouter(e, interactionController, jwt)
	cors := middleware.NewCors(e)
	listener := ioc.InitListener(e)
	callbackAuditorService := service.NewCallbackAuditor(auditorRepository, listener, logger)
	routerRouter := router.NewRouter(e, userRouter, actRouter, postRouter, commentRouter, feedRouter, interactionRouter, cors, callbackAuditorService)
	serverServer := server.NewServer(routerRouter, logger)
	return serverServer
}
