// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/dao/user_dao.go

// package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	model "github.com/raiki02/EG/internal/model"
)

// MockUserDaoHdl is a mock of UserDaoHdl interface.
type MockUserDaoHdl struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoHdlMockRecorder
}

// MockUserDaoHdlMockRecorder is the mock recorder for MockUserDaoHdl.
type MockUserDaoHdlMockRecorder struct {
	mock *MockUserDaoHdl
}

// NewMockUserDaoHdl creates a new mock instance.
func NewMockUserDaoHdl(ctrl *gomock.Controller) *MockUserDaoHdl {
	mock := &MockUserDaoHdl{ctrl: ctrl}
	mock.recorder = &MockUserDaoHdlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDaoHdl) EXPECT() *MockUserDaoHdlMockRecorder {
	return m.recorder
}

// CheckUserExist mocks base method.
func (m *MockUserDaoHdl) CheckUserExist(arg0 *gin.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserExist indicates an expected call of CheckUserExist.
func (mr *MockUserDaoHdlMockRecorder) CheckUserExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockUserDaoHdl)(nil).CheckUserExist), arg0, arg1)
}

// Create mocks base method.
func (m *MockUserDaoHdl) Create(arg0 *gin.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserDaoHdlMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDaoHdl)(nil).Create), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockUserDaoHdl) GetUserInfo(arg0 *gin.Context, arg1 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserDaoHdlMockRecorder) GetUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserDaoHdl)(nil).GetUserInfo), arg0, arg1)
}

// UpdateAvatar mocks base method.
func (m *MockUserDaoHdl) UpdateAvatar(arg0 *gin.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockUserDaoHdlMockRecorder) UpdateAvatar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserDaoHdl)(nil).UpdateAvatar), arg0, arg1, arg2)
}

// UpdateUsername mocks base method.
func (m *MockUserDaoHdl) UpdateUsername(arg0 *gin.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockUserDaoHdlMockRecorder) UpdateUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockUserDaoHdl)(nil).UpdateUsername), arg0, arg1, arg2)
}
