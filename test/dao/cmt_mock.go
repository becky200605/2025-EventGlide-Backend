// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/dao/comment_dao.go

// package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	model "github.com/raiki02/EG/internal/model"
)

// MockCommentDaoHdl is a mock of CommentDaoHdl interface.
type MockCommentDaoHdl struct {
	ctrl     *gomock.Controller
	recorder *MockCommentDaoHdlMockRecorder
}

// MockCommentDaoHdlMockRecorder is the mock recorder for MockCommentDaoHdl.
type MockCommentDaoHdlMockRecorder struct {
	mock *MockCommentDaoHdl
}

// NewMockCommentDaoHdl creates a new mock instance.
func NewMockCommentDaoHdl(ctrl *gomock.Controller) *MockCommentDaoHdl {
	mock := &MockCommentDaoHdl{ctrl: ctrl}
	mock.recorder = &MockCommentDaoHdlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentDaoHdl) EXPECT() *MockCommentDaoHdlMockRecorder {
	return m.recorder
}

// AnswerComment mocks base method.
func (m *MockCommentDaoHdl) AnswerComment(arg0 *gin.Context, arg1 *model.SubComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnswerComment indicates an expected call of AnswerComment.
func (mr *MockCommentDaoHdlMockRecorder) AnswerComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerComment", reflect.TypeOf((*MockCommentDaoHdl)(nil).AnswerComment), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockCommentDaoHdl) CreateComment(arg0 *gin.Context, arg1 *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentDaoHdlMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentDaoHdl)(nil).CreateComment), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockCommentDaoHdl) DeleteComment(arg0 *gin.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentDaoHdlMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentDaoHdl)(nil).DeleteComment), arg0, arg1)
}
