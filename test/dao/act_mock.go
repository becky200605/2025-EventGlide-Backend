// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/dao/activity_dao.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	req "github.com/raiki02/EG/api/req"
	model "github.com/raiki02/EG/internal/model"
)

// MockActDaoHdl is a mock of ActDaoHdl interface.
type MockActDaoHdl struct {
	ctrl     *gomock.Controller
	recorder *MockActDaoHdlMockRecorder
}

// MockActDaoHdlMockRecorder is the mock recorder for MockActDaoHdl.
type MockActDaoHdlMockRecorder struct {
	mock *MockActDaoHdl
}

// NewMockActDaoHdl creates a new mock instance.
func NewMockActDaoHdl(ctrl *gomock.Controller) *MockActDaoHdl {
	mock := &MockActDaoHdl{ctrl: ctrl}
	mock.recorder = &MockActDaoHdlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActDaoHdl) EXPECT() *MockActDaoHdlMockRecorder {
	return m.recorder
}

// CheckExist mocks base method.
func (m *MockActDaoHdl) CheckExist(arg0 *gin.Context, arg1 *model.Activity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckExist indicates an expected call of CheckExist.
func (mr *MockActDaoHdlMockRecorder) CheckExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExist", reflect.TypeOf((*MockActDaoHdl)(nil).CheckExist), arg0, arg1)
}

// CreateAct mocks base method.
func (m *MockActDaoHdl) CreateAct(arg0 *gin.Context, arg1 *model.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAct indicates an expected call of CreateAct.
func (mr *MockActDaoHdlMockRecorder) CreateAct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAct", reflect.TypeOf((*MockActDaoHdl)(nil).CreateAct), arg0, arg1)
}

// CreateDraft mocks base method.
func (m *MockActDaoHdl) CreateDraft(arg0 *gin.Context, arg1 *model.ActivityDraft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockActDaoHdlMockRecorder) CreateDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockActDaoHdl)(nil).CreateDraft), arg0, arg1)
}

// DeleteAct mocks base method.
func (m *MockActDaoHdl) DeleteAct(arg0 *gin.Context, arg1 model.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAct indicates an expected call of DeleteAct.
func (mr *MockActDaoHdlMockRecorder) DeleteAct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAct", reflect.TypeOf((*MockActDaoHdl)(nil).DeleteAct), arg0, arg1)
}

// FindActByDate mocks base method.
func (m *MockActDaoHdl) FindActByDate(arg0 *gin.Context, arg1 string) ([]model.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActByDate", arg0, arg1)
	ret0, _ := ret[0].([]model.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActByDate indicates an expected call of FindActByDate.
func (mr *MockActDaoHdlMockRecorder) FindActByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActByDate", reflect.TypeOf((*MockActDaoHdl)(nil).FindActByDate), arg0, arg1)
}

// FindActByName mocks base method.
func (m *MockActDaoHdl) FindActByName(arg0 *gin.Context, arg1 string) ([]model.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActByName", arg0, arg1)
	ret0, _ := ret[0].([]model.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActByName indicates an expected call of FindActByName.
func (mr *MockActDaoHdlMockRecorder) FindActByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActByName", reflect.TypeOf((*MockActDaoHdl)(nil).FindActByName), arg0, arg1)
}

// FindActBySearches mocks base method.
func (m *MockActDaoHdl) FindActBySearches(arg0 *gin.Context, arg1 *req.ActSearchReq) ([]model.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActBySearches", arg0, arg1)
	ret0, _ := ret[0].([]model.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActBySearches indicates an expected call of FindActBySearches.
func (mr *MockActDaoHdlMockRecorder) FindActBySearches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActBySearches", reflect.TypeOf((*MockActDaoHdl)(nil).FindActBySearches), arg0, arg1)
}

// LoadDraft mocks base method.
func (m *MockActDaoHdl) LoadDraft(arg0 *gin.Context, arg1, arg2 string) (*model.ActivityDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDraft", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.ActivityDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDraft indicates an expected call of LoadDraft.
func (mr *MockActDaoHdlMockRecorder) LoadDraft(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDraft", reflect.TypeOf((*MockActDaoHdl)(nil).LoadDraft), arg0, arg1, arg2)
}
